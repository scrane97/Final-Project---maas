install.packages(qplot)
library(ggplot2)
m <- numeric(1000)
for(i in 1:1000) {m[i] <-  mean(runif(100))}
head(m, 50)
qplot(m, geon="histogram", col=I("white"))
stat_bin(30)
mean(m)
knitr::opts_chunk$set(echo = TRUE)
##insert function script here
summary(cars)
shiny::runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/November20')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/helloWorld')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/helloWorld')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/helloWorld')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/helloWorld')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/helloWorld')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/helloWorld')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/ch16-shiny/demo-3')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/ch16-shiny/demo-3')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/ch16-shiny/demo-3')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/ch16-shiny/demo-3')
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/ch16-shiny/demo-3')
install.packages("rsconnect")
library("rsconnect", lib.loc="~/R/win-library/3.4")
##insert function script here
summary(cars)
runApp('C:/Users/abbyl/Desktop/Abby/INFO 201/helloWorld')
knitr::opts_chunk$set(echo = TRUE)
source("plot1.R")
install.packages("devtools")
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
source("plot1.R")
##insert function script here
summary(cars)
ufo <- read.csv("data/UFOCoords.csv")
make_plot1(ufo)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
source("plot1.R")
##insert function script here
summary(cars)
ufo <- read.csv("data/UFOCoords.csv")
make_plot1(ufo)
#replace other chart here
plot(pressure)
library(ggmap)
sightings_map(ufo)
library("data.table", lib.loc="~/R/win-library/3.4")
library("devtools", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("ggmap", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
library("jpeg", lib.loc="~/R/win-library/3.4")
library("jsonlite", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
library("maps", lib.loc="~/R/win-library/3.4")
library("markdown", lib.loc="~/R/win-library/3.4")
library("rmarkdown", lib.loc="~/R/win-library/3.4")
library(ggmap)
sightings_map(ufo)
knitr::opts_chunk$set(echo = TRUE)
source("scripts/plot1.R")
source("scripts/Map_of_Sightings.R")
source("scripts/SummaryInfo.R")
ufo <- read.csv("data/UFOCoords.csv")
summary_country(ufo)
summary_state(ufo)
summary_city(ufo)
summary_shape(ufo)
make_plot1(ufo)
library(ggmap)
sightings_map(ufo)
make_plot1(ufo)
knitr::opts_chunk$set(echo = TRUE)
source("scripts/plot1.R")
source("scripts/Map_of_Sightings.R")
source("scripts/SummaryInfo.R")
ufo <- read.csv("data/UFOCoords.csv")
summary_country(ufo)
summary_state(ufo)
summary_city(ufo)
summary_shape(ufo)
make_plot1(ufo)
sightings_map(ufo)
createRandomData(10)
library(dplyr)
install.packages(FNN)
install.packages("FNN")
library(FNN)
d <- count_of_deaths()
library(dplyr)
d <- count_of_deaths()
source('C:/Users/abbyl/Desktop/Abby/INFO 201/Final-Project---maas/journalistDeaths/data_manipulation_cpj.R', echo=TRUE)
getwed()
getwd()
setwd("..")
setwd("..")
setwd("Desktop/Abby/INFO 201/Final-Project---maas/")
library(plyr)
d <- count_of_deaths()
source('C:/Users/abbyl/Desktop/Abby/INFO 201/Final-Project---maas/journalistDeaths/data_manipulation_cpj.R', echo=TRUE)
library(leaflet)
library(dplyr)
library(data.table)
library(geojson)
library(geojsonio)
library(rgdal)
library(jsonlite)
url <- "https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson"
doc <- readLines(url)
write(doc, file = "tempgeoworld.json")
world <- geojson_read("tempgeoworld.json", what = "sp")
map <- leaflet(world)
par(mar = c(5,5,0,0), cex = 0.8)
# Create a continuous palette function
pal <- colorNumeric(
palette = "Blues",
domain = doc$gdp_md_est)
# Apply the function to provide RGB colors to addPolygons
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(gdp_md_est))
binpal <- colorBin("Blues", world$gdp_md_est, 6, pretty = FALSE)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~binpal(gdp_md_est))
qpal <- colorQuantile("Blues", world$gdp_md_est, n = 7)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~qpal(gdp_md_est))
d <-  count_of_deaths(data)
d <-  count_of_deaths()
View(d)
View(d)
View(d)
library(leaflet)
library(dplyr)
library(data.table)
library(geojson)
library(geojsonio)
library(rgdal)
library(jsonlite)
source("data/cpj.csv")
d <-  count_of_deaths()
url <- "https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson"
doc <- readLines(url)
write(doc, file = "tempgeoworld.json")
world <- geojson_read("tempgeoworld.json", what = "sp")
map <- leaflet(world)
par(mar = c(5,5,0,0), cex = 0.8)
# Create a continuous palette function
pal <- colorNumeric(
palette = "Blues",
domain = doc$gdp_md_est)
# Apply the function to provide RGB colors to addPolygons
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(gdp_md_est))
binpal <- colorBin("Blues", world$gdp_md_est, 6, pretty = FALSE)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~binpal(gdp_md_est))
qpal <- colorQuantile("Blues", world$gdp_md_est, n = 7)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~qpal(gdp_md_est))
??pal
library(leaflet)
library(dplyr)
library(data.table)
library(geojson)
library(geojsonio)
library(rgdal)
library(jsonlite)
source("data/cpj.csv")
d <-  count_of_deaths()
url <- "https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson"
doc <- readLines(url)
write(doc, file = "tempgeoworld.json")
world <- geojson_read("tempgeoworld.json", what = "sp")
map <- leaflet(world)
par(mar = c(5,5,0,0), cex = 0.8)
# Create a continuous palette function
pal <- colorNumeric(
palette = "Blues",
domain = doc$deaths)
# Apply the function to provide RGB colors to addPolygons
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(gdp_md_est))
binpal <- colorBin("Blues", world$gdp_md_est, 6, pretty = FALSE)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~binpal(gdp_md_est))
qpal <- colorQuantile("Blues", world$gdp_md_est, n = 7)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~qpal(gdp_md_est))
library(leaflet)
library(dplyr)
library(data.table)
library(geojson)
library(geojsonio)
library(rgdal)
library(jsonlite)
source("data/cpj.csv")
d <-  count_of_deaths()
url <- "https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson"
doc <- readLines(url)
write(doc, file = "tempgeoworld.json")
world <- geojson_read("tempgeoworld.json", what = "sp")
map <- leaflet(world)
par(mar = c(5,5,0,0), cex = 0.8)
# Create a continuous palette function
pal <- colorNumeric(
palette = "Blues",
domain = d$deaths)
# Apply the function to provide RGB colors to addPolygons
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(d$deaths))
binpal <- colorBin("Blues", d$deaths, 6, pretty = FALSE)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~binpal(d$death))
qpal <- colorQuantile("Blues", d$deaths, n = 7)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~qpal(d$deaths))
shiny::runApp('journalistDeaths')
runApp('journalistDeaths')
